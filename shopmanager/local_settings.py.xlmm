# coding:utf-8
__author__ = 'zfz'
import os
from .base import *

DEBUG = True

SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 12 * 60 * 60

ALLOWED_HOSTS = ['*']

############################ FUNCTION SWITCH #############################
INGORE_SIGNAL_EXCEPTION = False # signal异常捕获而且不再抛出
APP_PUSH_SWITCH = False  # APP推送开关
SMS_PUSH_SWITCH = False  # 短信推送开关
WEIXIN_PUSH_SWITCH = False  # 微信推送开关
MAMA_MISSION_PUSH_SWITCH = False  # 妈妈周激励推送开关

CLOSE_CELERY = True
ORMCACHE_ENABLE = False
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True

PROJECT_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))

##################LOCAL DB SETTINGS ##############################
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
#         'NAME': 'shopmgr_v1',  # Or path to database file if using sqlite3.
#         'USER': 'meixqhi',  # Not used with sqlite3.
#         'PASSWORD': '123123',  # Not used with sqlite3.
#         'HOST': '192.168.1.101',  # Set to empty string for localhost. Not used with sqlite3. #192.168.0.28
#         'PORT': '3306',  # Set to empty string for default. Not used with sqlite3.
#         'OPTIONS':  {
#             # 'init_command': 'SET storage_engine=Innodb;',
#             'charset': 'utf8',
#             # 'sql_mode': 'STRICT_TRANS_TABLES',
#         },  # storage_engine need mysql>5.4,and table_type need mysql<5.4
#         'TEST':{
#             'NAME': 'test_shopmgr_mxq',
#             'CHARSET': 'utf8',
#         }
#     }
# }

######################MIGRATE DB SETTINGS#############################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'xiaoludb',  # Or path to database file if using sqlite3.
        'USER': 'xiaoludev',  # Not used with sqlite3.
        'PASSWORD': 'Xiaolu_test123',  # Not used with sqlite3.
        'HOST': 'rm-bp17ea269uu21f9i1o.mysql.rds.aliyuncs.com',
        # Set to empty string for localhost. Not used with sqlite3. #192.168.0.28
        'PORT': '3306',  # Set to empty string for default. Not used with sqlite3.
        'OPTIONS': {
            # 'init_command': 'SET storage_engine=Innodb;',
            'charset': 'utf8',
            # 'sql_mode': 'STRICT_TRANS_TABLES',
        },  # storage_engine need mysql>5.4,and table_type need mysql<5.4
        'TEST': {
            'NAME': 'test_xiaoludb',
            'CHARSET': 'utf8',
        }
    },
    'readonly': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'xiaoludb',
        'USER': 'xiaoludev',
        'PASSWORD': 'Xiaolu_test123',
        'HOST': 'rm-bp17ea269uu21f9i1o.mysql.rds.aliyuncs.com',
        'OPTIONS': {
            'charset': 'utf8',
        }
    }
}

MONGODB_URI = '192.168.1.102:27017'

FANGZHENG_LANTINGHEI_FONT_PATH = '/data/fonts/方正兰亭黑.TTF'
if DEBUG:
    STATICFILES_DIRS = (
       os.path.join(PROJECT_ROOT, "site_media", "static"),
    )
    STATIC_ROOT = os.path.join(PROJECT_ROOT, "site_media", "local")
else:
    STATIC_ROOT = os.path.join(PROJECT_ROOT, "site_media", "static")

#################### change this site to yourself test domain #######################
SITE_URL = 'http://127.0.0.1:9000'
M_SITE_URL = 'http://127.0.0.1:9000'

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': '192.168.1.102:6379',
        'OPTIONS':{
            'DB': 7,
            'PARSER_CLASS': 'redis.connection.HiredisParser',
        }
    }
}
CELERY_BROKER_URL = 'redis://192.168.1.102:6379/11'
CELERY_RESULT_BACKEND = 'redis://192.168.1.102:6379/8'

##################################################################
INTERNAL_IPS = ('127.0.0.1',)
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    # 'debug_toolbar.panels.settings.SettingsPanel',
    # 'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    # 'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    # 'debug_toolbar.panels.logging.LoggingPanel',
    # 'debug_toolbar.panels.redirects.RedirectsPanel',
]
MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + (
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'core.middleware.middleware.ProfileMiddleware',
)

INSTALLED_APPS.extend([
    'debug_toolbar',
])

#################################### EXTRA CONFIG ########################################
import raven
RAVEN_CONFIG = {
    'dsn': 'http://7f041a7308f842a682d621f7ae3c81a9:c74fbc9e12f14835bb671a82e1f6dc53@sentry.xiaolumm.com/3',
    # If you are using git, you can also automatically configure the
    # release based on the git info.
    'release': raven.fetch_git_sha(PROJECT_ROOT),
}

########################### Statsd ##############################
STATSD_CLIENT = 'django_statsd.clients.normal'
# STATSD_PORT = 8251
# STATSD_CLIENT = 'statsd.oneapm'
# STATSD_CELERY_SIGNALS = True
# MIDDLEWARE_CLASSES = (
#         'django_statsd.middleware.GraphiteRequestTimingMiddleware',
#         'django_statsd.middleware.GraphiteMiddleware',
#         ) + MIDDLEWARE_CLASSES

######################## WEIXIN CONFIG ########################
WX_NOTIFY_URL = 'http://i.xiaolumm.com/rest/notify/{channel}/'
WX_JS_API_CALL_URL ='http://i.xiaolumm.com/pay/?showwxpaytitle=1'

# ================ 小鹿美美特卖[公众号] ==================
WEIXIN_SECRET = 'dbd2103bb55c46c7a019ae1c1089f2fa'
WEIXIN_APPID = 'wx3f91056a2928ad2d'

# ================ 小鹿美美[公众号] ==================
WX_PUB_APPID = "wx3f91056a2928ad2d"
WX_PUB_APPSECRET = "dbd2103bb55c46c7a019ae1c1089f2fa"

WX_PUB_MCHID = "1236482102" #受理商ID，身份标识
WX_PUB_KEY   = "t5UXHfwR7QEv2jMLFuZm8DdqnAT0ON9a" #支付密钥

WX_PUB_CERT_PEM_PATH = '/data/certs/wx_pub/apiclient_cert.pem'
WX_PUB_KEY_PEM_PATH = '/data/certs/wx_pub/apiclient_key.pem'

WX_PUB_REFUND_USER_ID = 'refundem1@1236482102'

# ================ 小鹿美美[ APP客户端] ==================
WX_APPID = "wx25fcb32689872499"
WX_APPSECRET = "3c7b4e3eb5ae4cfb132b2ac060a872ee"

WX_MCHID = "1268398601" #受理商ID，身份标识
WX_KEY   = "t5UXHfwR7QEv2jMLFuZm8DdqnAT0ON9a" #支付密钥

WX_CERT_PEM_PATH = '/data/certs/wx/apiclient_cert.pem'
WX_KEY_PEM_PATH = '/data/certs/wx/apiclient_key.pem'

WX_REFUND_USER_ID = 'refundem2'

# ================ 小鹿美美[微信小程序] ==================
WEAPP_APPID  = 'wxea4fd45c52e4a20e'
WEAPP_SECRET = '1246301cdb41c6336d82a12600189283'

WEAPP_MCHID = "1410583302" #受理商ID，身份标识
WEAPP_KEY   = "t5UXHfwR7QEv2jMLFuZm8DdqnAT0ON9a" #支付密钥

WEAPP_CERT_PEM_PATH = '/data/certs/weapp/apiclient_cert.pem'
WEAPP_KEY_PEM_PATH  = '/data/certs/weapp/apiclient_key.pem'

################### SANDPAY SETTINGS ##################
SANDPAY_API_GETWAY           = "http://61.129.71.103:7970/agent-main/openapi"
SANDPAY_RSA_KEY_PATH         = '/data/certs/sandpay_key.pem'
SANDPAY_RSA_CERT_PATH        = "/data/certs/sandpay.pem"
SANDPAY_AGENT_PAY_NOTICE_URL = ""

################### PING++ SETTINGS ##################
PINGPP_APPID           = "app_qPCaj95Serj5PKOq"
PINGPP_APPKEY          = "sk_test_8y58u9zbPWTKTGGa1GrTi1mT" #TEST KEY
PINGPP_CLENTIP         = "127.0.0.1"

################### QINIU SETTINGS ##################

QINIU_ACCESS_KEY = "M7M4hlQTLlz_wa5-rGKaQ2sh8zzTrdY8JNKNtvKN"
QINIU_SECRET_KEY = "8MkzPO_X7KhYQjINrnxsJ2eq5bsxKU1XmE8oMi4x"

QINIU_PRIVATE_BUCKET = 'invoiceroom'
QINIU_PRIVATE_DOMAIN = '7xrpt3.com2.z0.glb.qiniucdn.com'
QINIU_PUBLIC_BUCKET = 'xiaolumm'
QINIU_PUBLIC_DOMAIN = 'img.xiaolumeimei.com'

############### REMOTE MEDIA STORAGE ################
QINIU_BUCKET_NAME   = 'mediaroom'
QINIU_BUCKET_DOMAIN = '7xogkj.com1.z0.glb.clouddn.com'
QINIU_SECURE_URL    = 0
DEFAULT_FILE_STORAGE = 'qiniustorage.backends.QiniuStorage'
MEDIA_URL = "http://%s/" % QINIU_BUCKET_DOMAIN

########################## APP SECRET ######################
IOS_APP_SECRET = "test"
ANDROID_APP_SECRET = "test"

############################# ALIYUN OCR CONFIG ##############################
ALIYUN_APPCODE = '6dc0d0df019d4e83a704b434391e42b1'
IDCARD_OCR_URL = 'https://dm-51.data.aliyun.com/rest/160601/ocr/ocr_idcard.json'

LOGGER_HANDLERS = [
    ('outware', 'sentry,console,jsonfile'),
    ('service', 'jsonfile'),
    ('root', 'sentry,console'),
    ('shopback','sentry,console'),
    ('shopapp','sentry,console'),
    ('flashsale','sentry,console'),
    ('core','sentry,console'),
    ('auth','sentry,console'),
    ('supplychain','sentry,console'),
    ('models','sentry,console'),
    ('queryset','sentry,console'),
    ('statistics', 'sentry,file'),
    ('django.request','sentry,console'),
    ('sentry.errors','sentry,console'),
    ('celery.handler','sentry,console'),
    ('notifyserver.handler','sentry,console'),
    ('yunda.handler','sentry,console'),
    ('mail.handler','sentry,console'),
    ('xhtml2pdf','sentry,console'),
    ('restapi.errors','sentry,console'),
    ('weixin.proxy','sentry,console'),
    ('django.db.backends','console'),
]

LOGGER_TEMPLATE = {
    'handlers': ['sentry'],
    'level': 'DEBUG',
    'propagate': True,
}

def comb_logger(log_tuple,temp):
    if isinstance(log_tuple,(list,tuple)) and len(log_tuple) == 2:
        temp.update(handlers=log_tuple[1].split(','))
        return log_tuple[0],temp
    return log_tuple[0],temp

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s  %(message)s'
        },
        'json': {
            '()': 'core.logger.JsonFormatter',
            'format': '%(levelname)s %(asctime)s  %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/django-debug.log',
            'formatter': 'simple'
        },
        'jsonfile': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/service-json.log',
            'formatter': 'json'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler'
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'INFO',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        }
    },
    'loggers': dict([comb_logger(handler,LOGGER_TEMPLATE.copy()) for handler in LOGGER_HANDLERS]),
}
